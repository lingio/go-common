package storage

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"
	"sync"

	"github.com/lingio/{{.ServiceName}}/models"

	"github.com/lingio/go-common"
	"github.com/minio/minio-go/v7"
	"github.com/go-redis/redis/v8"
	uuid "github.com/satori/go.uuid"

	zl "github.com/rs/zerolog/log"
)

{{$modelName := .DbTypeName -}}
{{$ID := .IdName -}}
{{$storeName := printf "%sStore" .TypeName -}}
{{$cacheInterface := printf "%sCache" .TypeName -}}
{{$cacheName := printf "%sRedisCache" .TypeName -}}
{{$cacheKey := printf "%sCacheKey" .TypeName -}}
{{$filename := printf "%sFilename" .TypeName -}}

const {{$cacheKey}}ID = "{{.IdName | ToLower }}"
{{range .SecondaryIndexes -}}
const {{$cacheKey}}{{.Name}} = "{{.CacheKey}}"
{{end -}}
{{if .GetAll -}}
const {{$cacheKey}}All = "_all"
{{- end }}

var {{$storeName}}Config common.ObjectStoreConfig
func init() {
	err := json.Unmarshal([]byte(`
{{.Config | PrettyPrint}}
	`), &{{$storeName}}Config)
	if err != nil {
		panic(fmt.Errorf("error parsing store config: %w", err))
	}
}

type {{$storeName}} struct {
	backend common.LingioStore
	cache   {{$cacheInterface}}
	ready   common.AtomicBool
}

type {{.TypeName}}Cache interface {
	Initialized() (bool, error)
	AcquireInitLock(context.Context) error
	ReleaseInitLock(context.Context) error
	Init(common.LingioStore) error

	// Primary key operations
	Put(models.{{.DbTypeName}}, time.Duration, string) *common.Error
	Get(string) (*models.{{.DbTypeName}}, string, *common.Error)
	Delete(string) *common.Error
	{{if .GetAll -}}
	GetAll() ([]models.{{$modelName}}, string, *common.Error)
	{{- end}}

	// Secondary index operations
	{{- range .SecondaryIndexes -}}
	{{$keyList :=  .Keys | IndexKeysOnly | CamelCase | Join ", " }}
	{{- if eq .Type "unique"}}
	GetBy{{.Name}}({{$keyList}} string) (*models.{{$modelName}}, string, *common.Error)
	{{- else if eq .Type "set"}}
	GetAllBy{{.Name}}({{$keyList}} string) ([]models.{{$modelName}}, string, *common.Error)
	{{- end -}}
	{{end}}
}

// {{.PrivateTypeName}}CacheObject is the internally stored cached object.
type {{.PrivateTypeName}}CacheObject struct {
	ETag string
	Entity models.{{.DbTypeName}}
}

// {{.TypeName}}CacheIngest is used during initialization to fill the cache with data from the backend.
type {{.TypeName}}CacheIngest struct {
	common.ObjectInfo
	Entity models.{{.DbTypeName}}
}

// New{{$storeName}} configures a new store and initializes the provided cache if required.
func New{{$storeName}}(mc *minio.Client, cache {{.TypeName}}Cache, serviceKey string) (*{{$storeName}}, error) {
	// DefaultOjbectStoreConfig || deserialize
	objectStore, err := common.NewObjectStore(mc, "{{.BucketName}}", {{$storeName}}Config)
	if err != nil {
		return nil, fmt.Errorf("creating object store: %w", err)
	}

	encryptedStore, err := common.NewEncryptedStore(objectStore, serviceKey)
	if err != nil {
		return nil, fmt.Errorf("creating encrypted store: %w", err)
	}

	db := &{{$storeName}}{
		backend: encryptedStore,
		cache:   cache,
		ready:   0,
	}

	if err := db.cache.Init(db.backend); err != nil {
		return nil, fmt.Errorf("initializing cache: %w", err)
	}
	db.ready.SetTrue()
	return db, nil
}

// {{$filename}} returns the object store filename used for the object identified by the provided id
// {{$filename}}("id") --> "{{if .FilenameFormat}}{{printf .FilenameFormat "id"}}{{- else -}}id.json{{end}}"
func {{$filename}}(id string) string {
	{{ if .FilenameFormat -}}
	return fmt.Sprintf("{{.FilenameFormat}}", id)
	{{- else -}}
	return id + ".json"
	{{- end }}
}

// StoreName returns the store name of the backing lingio store.
func (s *{{$storeName}}) StoreName() string {
	return s.backend.StoreName()
}

//=============================================================================
// Type-safe methods.
//=============================================================================

// Create attempts to store the provided object in store.
func (s *{{$storeName}}) Create(ctx context.Context, obj models.{{.DbTypeName}}) (*models.{{.DbTypeName}}, *common.Error) {
	if obj.{{.IdName}} != "" {
		// check that the object doesn't exist
		o, _, err := s.Get(obj.{{.IdName}})
		if err != nil && err.HttpStatusCode != http.StatusNotFound {
			return nil, common.NewErrorE(http.StatusInternalServerError, err).
				Str("ID", obj.{{.IdName}}).Msg("failed query for object")
		}
		if o != nil { // object exists!
			return nil, common.NewError(http.StatusBadRequest).
				Str("ID", obj.{{.IdName}}).Msg("an object with this ID is already stored in the database")
		}
	} else {
		obj.{{.IdName}} = uuid.NewV4().String()
	}
	if err := s.put(ctx, obj); err != nil {
		return nil, err
	}
	return &obj, nil
}


// Get attempts to load an object with the specified ID from the store.
func (s *{{$storeName}}) Get(id string) (*models.{{.DbTypeName}}, string, *common.Error) {
	return s.cache.Get(id)
}

{{if .GetAll -}}
// GetAll loads all objects from this store.
func (s *{{$storeName}}) GetAll() ([]models.{{.DbTypeName}}, string, *common.Error) {
	return s.cache.GetAll()
}
{{- end }}

// Put updates or creates the object in both cache and backing store.
func (s *{{$storeName}}) Put(ctx context.Context, obj models.{{.DbTypeName}}) *common.Error {
	return s.put(ctx, obj)
}

// put does the heavy lifting for both Put and Create methods.
func (s *{{$storeName}}) put(ctx context.Context, obj models.{{.DbTypeName}}) *common.Error {
	data, err := json.Marshal(obj)
	if err != nil {
		return common.NewErrorE(http.StatusInternalServerError, err).
			Str("ID", obj.{{.IdName}}).Msg("failed to marshal json")
	}
	info, lerr := s.backend.PutObject(ctx, {{$filename}}(obj.{{.IdName}}), data)
	if lerr != nil {
		return lerr.Str("ID", obj.{{.IdName}}).Msg("failed to write to minio")
	}

	var expiration time.Duration
	if !info.Expiration.IsZero() {
		expiration = info.Expiration.Sub(time.Now())
	}
	return s.cache.Put(obj, expiration, info.ETag)
}

// Delete
func (s *{{$storeName}}) Delete(ctx context.Context, id string) *common.Error {
	if err := s.backend.DeleteObject(ctx, {{$filename}}(id)); err != nil {
		return err.Str("ID", id).Msg("failed to delete object in minio")
	}
	return s.cache.Delete(id)
}

//=============================================================================
// Extra functions from secondary indexes, passes to cache layer
//=============================================================================
{{range .SecondaryIndexes -}}
{{$keyList :=  .Keys | IndexKeysOnly | CamelCase | Join ", " }}
{{if eq .Type "unique"}}
// GetBy{{.Name}} fetches a single {{$modelName}} by its {{.Key}}
func (s *{{$storeName}}) GetBy{{.Name}}({{ $keyList }} string) (*models.{{$modelName}}, string, *common.Error) {
	return s.cache.GetBy{{.Name}}({{ $keyList }})
}
{{else if eq .Type "set"}}
// GetAllBy{{.Name}} fetches all {{$modelName}}s by their {{.Key}}
func (s *{{$storeName}}) GetAllBy{{.Name}}({{ $keyList }} string) ([]models.{{$modelName}}, string, *common.Error) {
	return s.cache.GetAllBy{{.Name}}({{ $keyList }})
}
{{end -}}
{{end}}
//=============================================================================
// Cache implementation
//=============================================================================

// {{$cacheName}} is a redis-backed implementation of {{$cacheInterface}}
type {{$cacheName}} struct {
	*common.RedisCache
}

// New{{$cacheName}} writes to leader and reads from follower.
func New{{$cacheName}}(client *redis.Client) *{{$cacheName}} {
	return &{{$cacheName}}{
		RedisCache: common.NewRedisCache(client, "{{.BucketName}}", "{{.Version}}"),
	}
}

// Initialized performs a greedy check if the cache is initialized.
func (c {{$cacheName}}) Initialized() (bool, error) {
	v, err := c.Client.Exists(context.TODO(), c.InitKey()).Result()
	if err != nil {
		return false, err
	}
	return v != 0, nil
}


// Init checks if the store is initialized before attempting to acquire
// a temporary lock on the cache. To avoid deadlocks, the lock is designed to
// automatically expire after a few seconds. Since we don't know how long time
// the bucket --> cache initialization takes, we need to periodically extend
// the lock while we fill the cache with data from the object store backend.
func (c *{{$cacheName}}) Init(backend common.LingioStore) (resulterr error) {
	var objectsLoaded uint32
	defer func() {
		if resulterr == nil {
			c.WarmedUp.SetTrue()
			zl.Info().Str("component", "{{$storeName}}").Uint32("objectsLoaded", objectsLoaded).Msg("cache initialized.")
		}
	}()

	for {
		// Perform early bail check since lock acquire can take some time.
		if ok, err := c.Initialized(); err != nil {
			return fmt.Errorf("checking cache: %w", err)
		} else if ok {
			zl.Info().Str("component", "{{$storeName}}").Msg("cache found, assuming up-to-date.")
			return nil
		}

		// All concurrent processes will exit before or when this context completes.
		ctx, cancel := context.WithCancel(context.Background())

		// Try to acquire the init lock. It will be valid for a few seconds and we might need to extend it.
		// If something stops the world (GC pause / ??) we might lose the lock (and not know about it).
		// ^ This case is not currently handled.
		if err := c.AcquireInitLock(ctx); err != nil {
			cancel()
			zl.Warn().Str("component", "{{$storeName}}").Msg("could not acquire lock to initialize cache. retrying in 5s...")
			time.Sleep(5*time.Second)
			continue
		}
		defer cancel()

		defer func(ctx context.Context) {
			// Not incredibly important, since the lock will automatically expire anyway.
			if err := c.ReleaseInitLock(ctx); err != nil {
				zl.Warn().Str("component", "{{$storeName}}").Err(err).Msg("could not release cache lock")
			}
		}(ctx)

		// Now that we have the lock, ensure that our view of the cache init status is still up-to-date.
		if ok, err := c.Initialized(); err != nil {
			return fmt.Errorf("checking cache: %w", err)
		} else if ok {
			zl.Info().Str("component", "{{$storeName}}").Msg("cache found, assuming up-to-date.")
			return nil
		}

		zl.Info().Str("component", "{{$storeName}}").Msg("cache not initialized, lock acquired, now fetching all data...")

		const NUM_WORKERS = 50

		masterGrp, mctx := errgroup.WithContext(ctx)
		taskGrp, wctx := errgroup.WithContext(ctx)
		cacheinit := make(chan {{.TypeName}}CacheIngest, NUM_WORKERS*400)

		// Load objects from backend
		taskGrp.Go(func() error {
			listing := backend.ListObjects(wctx)
			subgrp, wctx := errgroup.WithContext(wctx)
			defer close(cacheinit)
			for i := 0; i < NUM_WORKERS; i++ {
				subgrp.Go(func() error {
					for {
						select {
						case <-wctx.Done():
							return nil
						case req, more := <-listing:
							if !more {
								return nil
							}

							data, info, err := backend.GetObject(req.Key)
							if err != nil {
								return fmt.Errorf("backend: %w", err)
							}

							var entity models.{{.DbTypeName}}
							if err := json.Unmarshal(data, &entity); err != nil {
								return fmt.Errorf("unmarshalling: %w", err)
							}

							if info.Key != {{$filename}}(entity.{{.IdName}}) {
								zl.Warn().Str("key", info.Key).Msg("skipping object with mismatched filename")
								continue
							}

							cacheinit <- {{.TypeName}}CacheIngest{
								ObjectInfo: info,
								Entity:     entity,
							}
						}
					}
					return nil
				})
			}
			return subgrp.Wait()
		})


		taskGrp.Go(func() error {
			subgrp, wctx := errgroup.WithContext(wctx)
			for i := 0; i < NUM_WORKERS*20; i++ {
				subgrp.Go(func() error {
					for {
						select {
						case <-wctx.Done():
							return nil
						case obj, more := <-cacheinit:
							if !more {
								return nil
							}
							var expiration time.Duration
							if !obj.Expiration.IsZero() {
								expiration = obj.Expiration.Sub(time.Now())
							}
							if err := c.Put(obj.Entity, expiration, obj.ETag); err != nil {
								return fmt.Errorf("cache init: %w", err)
							}

							loaded := atomic.AddUint32(&objectsLoaded, 1)
							if loaded % 10_000 == 0 {
								zl.Info().Str("component", "{{$storeName}}").
									Uint32("objectsLoaded", loaded).
									Msg("initializing cache")

							}
						}
					}
				})
			}
			return subgrp.Wait()
		})


		masterGrp.Go(func() error {
			ticker := time.NewTicker(3*time.Second)
			defer ticker.Stop()

			taskGrpDone := make(chan error)
			defer close(taskGrpDone)
			go func() {
				taskGrpDone <- taskGrp.Wait()
			}()

			for {
				select {
				case <-ticker.C:
					if err := c.AcquireInitLock(mctx); err != nil {
						return fmt.Errorf("cache lock refresh: %w", err)
					}
				case err := <-taskGrpDone:
					return err
				}
			}
		})


		if err := masterGrp.Wait(); err != nil {
			return err
		}

		// Only mark cache as initialized if we didn't encounter any error.
		if err := c.Client.Set(ctx, c.InitKey(), []byte("1"), 0).Err(); err != nil {
			zl.Warn().Str("component", "{{$storeName}}").Msg("could not mark cache as initialized")
			return err
		}

		// returning will cancel the ctx, which will also cancel listing and workers
		return nil
	}

	//unreachable!
}

func (c {{$cacheName}}) Put(obj models.{{.DbTypeName}}, expiration time.Duration, etag string) *common.Error {

	co := {{.PrivateTypeName}}CacheObject{
		ETag:   etag,
		Entity: obj,
	}

	// Fetch the previous version of this object (if there is any)
	orig, _, lerr := c.Get(obj.{{.IdName}})
	if lerr != nil && lerr.HttpStatusCode != http.StatusNotFound {
		return lerr
	}

	// Primary index: {{.IdName}}
	if lerr = c.put(c.Key({{$cacheKey}}ID, obj.{{.IdName}}), co, expiration); lerr != nil {
		return lerr
	}

	{{ if .GetAll -}}
	// Primary index for all objects set: people.v1.all=all
	// ETag index for all objects set: people.v1.etag.all=all
	c.Client.SAdd(context.TODO(), c.Key({{$cacheKey}}All, {{$cacheKey}}All), obj.{{$ID}})
	err := c.Client.Incr(context.TODO(), c.ETagKey({{$cacheKey}}All, {{$cacheKey}}All)).Err()
	if err != nil {
		return common.NewErrorE(http.StatusInternalServerError, err)
	}
	{{- end }}

	{{if .SecondaryIndexes -}}
	var idx string
	{{- end}}

	{{- /* Update unique secondary indexes */ -}}
	{{range .SecondaryIndexes -}}
	{{if eq .Type "unique"}}
	{{if .Optional -}}
	// Optional unique index: {{.Name}}
	if {{ .Keys | CheckOptional "obj" | Join " && " }} {
		idx = CompoundIndex({{ .Keys | Materialize "obj" | Join ", " }})
		if lerr = c.put(c.Key({{$cacheKey}}{{.Name}}, idx), co, expiration); lerr != nil {
			return lerr
		}
	}
	{{else -}}
	// Unique index: {{.Name}}
	idx = CompoundIndex({{ .Keys | Materialize "obj" | Join ", " }})
	if lerr = c.put(c.Key({{$cacheKey}}{{.Name}}, idx), co, expiration); lerr != nil {
		return lerr
	}
	{{end -}}
	{{end -}}
	{{end}}

	{{- /* Update aggregated secondary indexes */ -}}
	{{range .SecondaryIndexes -}}
	{{if eq .Type "set"}}
	{{ if .Optional -}}
	// Optional set index: {{.Name}}
	if {{ .Keys | CheckOptional "obj" | Join " && " }} {
		idx = CompoundIndex({{ .Keys | Materialize "obj" | Join ", " }})
		c.Client.SAdd(context.TODO(), c.Key({{$cacheKey}}{{.Name}}, idx), obj.{{$ID}})
		err := c.Client.Incr(context.TODO(), c.ETagKey({{$cacheKey}}{{.Name}}, idx)).Err()
		if err != nil {
			return common.NewErrorE(http.StatusInternalServerError, err)
		}
	}
	{{else -}}
	// Set index: {{.Name}}
	idx = CompoundIndex({{ .Keys | Materialize "obj" | Join ", " }})
	c.Client.SAdd(context.TODO(), c.Key({{$cacheKey}}{{.Name}}, idx), obj.{{$ID}})
	err := c.Client.Incr(context.TODO(), c.ETagKey({{$cacheKey}}{{.Name}}, idx)).Err()
	if err != nil {
		return common.NewErrorE(http.StatusInternalServerError, err)
	}
	{{end -}}
	{{end -}}
	{{end}}


	{{- /* Remove old indexes if keys changed. */}}
	// Delete old secondary indexes if they changed
	if orig != nil {
		{{range .SecondaryIndexes -}}
		{{if eq .Type "unique" -}}
		// {{ .Name }} depends on ({{ .Keys | Materialize "" | Join ", " }})
		{{if .Optional -}}
		{
			oldExists := {{ .Keys | CheckOptional "orig" | Join " && " }}
			newNil := !({{ .Keys | CheckOptional "obj" | Join " && " }})
			if (oldExists && newNil) || (oldExists && !newNil && ({{ .Keys | CompareFields "obj" "orig" " != " | Join " || "}})) {
				idx := CompoundIndex({{ .Keys | Materialize "orig" | Join ", " }})
				err := c.Client.Del(context.TODO(), c.Key({{$cacheKey}}{{.Name}}, idx)).Err()
				if err != nil {
					return common.NewErrorE(http.StatusInternalServerError, err)
				}
			}
		}
		{{- else -}}
		if {{ .Keys | CompareFields "obj" "orig" " != " | Join " || " }} {
			idx = CompoundIndex({{ .Keys | Materialize "orig" | Join ", " }})
			err := c.Client.Del(context.TODO(), c.Key({{$cacheKey}}{{.Name}}, idx)).Err()
			if err != nil {
				return common.NewErrorE(http.StatusInternalServerError, err)
			}
		}
		{{end -}}
		{{end -}}
		{{end}}
		{{- /* */ -}}
		{{range .SecondaryIndexes -}}
		{{if eq .Type "set"}}
		// {{ .Name }} depends on ({{ .Keys | Materialize "" | Join ", " }})
		{{ if .Optional -}}
		{
			oldExists := {{ .Keys | CheckOptional "orig" | Join " && " }}
			newNil := !({{ .Keys | CheckOptional "obj" | Join " && " }})
			if (oldExists && newNil) || (oldExists && !newNil && ({{ .Keys | CompareFields "obj" "orig" " != " | Join " || "}})) {
				idx = CompoundIndex({{ .Keys | Materialize "orig" | Join ", " }})
				c.Client.SRem(context.TODO(), c.Key({{$cacheKey}}{{.Name}}, idx), orig.{{$ID}})
				err := c.Client.Incr(context.TODO(), c.ETagKey({{$cacheKey}}{{.Name}}, idx)).Err()
				if err != nil {
					return common.NewErrorE(http.StatusInternalServerError, err)
				}
			}
		}
		{{- else -}}
		if {{ .Keys | CompareFields "obj" "orig" " != " | Join " || " }} {
			idx = CompoundIndex({{ .Keys | Materialize "orig" | Join ", " }})
			c.Client.SRem(context.TODO(), c.Key({{$cacheKey}}{{.Name}}, idx), orig.{{$ID}})
			err := c.Client.Incr(context.TODO(), c.ETagKey({{$cacheKey}}{{.Name}}, idx)).Err()
			if err != nil {
				return common.NewErrorE(http.StatusInternalServerError, err)
			}
		}
		{{end -}}
		{{end -}}
		{{end}}
	}
	return nil
}

func (c {{$cacheName}}) put(fullKey string, co {{.PrivateTypeName}}CacheObject, expiration time.Duration) *common.Error {
	data, err := json.Marshal(co)
	if err != nil {
		return common.NewErrorE(http.StatusInternalServerError, err)
	}
	cmd := c.Client.Set(context.TODO(), fullKey, data, expiration)
	if _, err := cmd.Result(); err != nil {
		return common.NewErrorE(http.StatusInternalServerError, err)
	}
	return nil
}

func (c {{$cacheName}}) get(keyName string, key string) (*models.{{.DbTypeName}}, string, *common.Error) {
	cmd := c.Client.Get(context.TODO(), c.Key(keyName, key))
	data, err := cmd.Result()
	if err != nil && err == redis.Nil {
		return nil, "", common.NewErrorE(http.StatusNotFound, err)
	} else if err != nil {
		return nil, "", common.NewErrorE(http.StatusInternalServerError, err)
	}
	var co {{.PrivateTypeName}}CacheObject
	if err := json.Unmarshal([]byte(data), &co); err != nil {
		return nil, "", common.NewErrorE(http.StatusInternalServerError, err)
	}
	return &co.Entity, co.ETag, nil
}

// Get a cached {{$modelName}} by it's {{.IdName}}
func (c {{$cacheName}}) Get({{.IdName | ToLower}} string) (*models.{{.DbTypeName}}, string, *common.Error) {
	return c.get({{$cacheKey}}ID, {{.IdName | ToLower}})
}

// MGet fetches multiple {{$modelName}} by their ID at the same time.
func (c {{$cacheName}}) MGet(ids ...string) ([]models.{{.DbTypeName}}, string, *common.Error) {
	objs := make([]models.{{.DbTypeName}}, 0, len(ids))
	if len(ids) == 0 {
		return objs, "", nil
	}

	for i, key := range ids {
		ids[i] = c.Key({{$cacheKey}}ID, key)
	}

	res, err := c.Client.MGet(context.TODO(), ids...).Result()
	if err != nil {
		return nil, "", common.NewErrorE(http.StatusInternalServerError, err)
	}
	for _, data := range res {
		// should be rare case; the id we fetched does not exist
		if data == nil {
			continue
		}

		var co {{.PrivateTypeName}}CacheObject
		if err := json.Unmarshal([]byte(data.(string)), &co); err != nil {
			return nil, "", common.NewErrorE(http.StatusInternalServerError, err)
		}
		objs = append(objs, co.Entity)
	}

	return objs, "", nil
}

{{range .SecondaryIndexes -}}
{{$keyList :=  .Keys | IndexKeysOnly | CamelCase | Join ", " }}
{{if eq .Type "unique"}}
// GetBy{{.Name}} fetches a cached {{$modelName}} by its {{.Key}}
func (c *{{$cacheName}}) GetBy{{.Name}}({{ $keyList }} string) (*models.{{$modelName}}, string, *common.Error) {
	return c.get({{$cacheKey}}{{.Name}}, CompoundIndex({{$keyList}}))
}
{{else if eq .Type "set"}}
// GetAllBy{{.Name}} fetches all cached {{$modelName}}s by their {{.Key}}
func (c *{{$cacheName}}) GetAllBy{{.Name}}({{$keyList}} string) ([]models.{{$modelName}}, string, *common.Error) {
	idx := CompoundIndex({{$keyList}})
	keys, err := c.Client.SMembers(context.TODO(), c.Key({{$cacheKey}}{{.Name}}, idx)).Result()
	if err != nil {
		return nil, "", common.NewErrorE(http.StatusInternalServerError, err)
	}

	objs, _, lerr := c.MGet(keys...)
	if lerr != nil {
		return nil, "", common.NewErrorE(http.StatusInternalServerError, lerr)
	}

	etag, err := c.Client.Get(context.TODO(), c.ETagKey({{$cacheKey}}{{.Name}}, idx)).Result()
	if err == redis.Nil && len(keys) == 0 {
		return objs, "", nil
	} else if err != nil {
		return nil, "", common.NewErrorE(http.StatusInternalServerError, err)
	}
	return objs, etag, nil
}
{{end -}}
{{end}}

{{ if .GetAll -}}
// GetAll fetches all cached {{$modelName}}s
func (c *{{$cacheName}}) GetAll() ([]models.{{$modelName}}, string, *common.Error) {
	keys, err := c.Client.SMembers(context.TODO(), c.Key({{$cacheKey}}All, {{$cacheKey}}All)).Result()
	if err != nil {
		return nil, "", common.NewErrorE(http.StatusInternalServerError, err)
	}

	objs, _, lerr := c.MGet(keys...)
	if lerr != nil {
		return nil, "", common.NewErrorE(http.StatusInternalServerError, lerr)
	}

	etag, err := c.Client.Get(context.TODO(), c.ETagKey({{$cacheKey}}All, {{$cacheKey}}All)).Result()
	if err == redis.Nil && len(keys) == 0 {
		return objs, "", nil
	} else if err != nil {
		return nil, "", common.NewErrorE(http.StatusInternalServerError, err)
	}
	return objs, etag, nil
}
{{- end}}


func (c *{{$cacheName}}) Delete({{$ID | ToLower}} string) *common.Error {
	{{if .SecondaryIndexes -}}
	var idx string
	o, _, lerr := c.Get({{$ID | ToLower}})
	{{else -}}
	_, _, lerr := c.Get({{$ID | ToLower}})
	{{end -}}
	if lerr != nil {
		return lerr
	}

	// Delete ID-cache
	var err error
	keys := []string{c.Key({{$cacheKey}}ID, {{$ID | ToLower}})}

	{{range .SecondaryIndexes -}}
	{{if eq .Type "unique"}}
	// Delete from unique secondary index: {{.Name}}
	{{if .Optional}}
	if {{ .Keys | CheckOptional "o" | Join " && " }} {
		idx = CompoundIndex({{ .Keys | Materialize "o" | Join ", " }})
		keys = append(keys, c.Key({{$cacheKey}}{{.Name}}, idx))
	}
	{{else}}
	idx = CompoundIndex({{ .Keys | Materialize "o" | Join ", " }})
	keys = append(keys, c.Key({{$cacheKey}}{{.Name}}, idx))
	{{end -}}
	{{end -}}
	{{end}}

	// Delete all keys at the same time
	err = c.Client.Del(context.TODO(), keys...).Err()
	if err != nil {
		return common.NewErrorE(http.StatusInternalServerError, err)
	}

	{{if .GetAll -}}
	// Remove from all set
	c.Client.SRem(context.TODO(), c.Key({{$cacheKey}}All, {{$cacheKey}}All), {{$ID | ToLower}})
	err = c.Client.Incr(context.TODO(), c.ETagKey({{$cacheKey}}All, {{$cacheKey}}All)).Err()
	if err != nil {
		return common.NewErrorE(http.StatusInternalServerError, err)
	}
	{{ end }}

	{{range .SecondaryIndexes -}}
	{{if eq .Type "set"}}
	// Remove from 'set' secondary index: {{.Name}}
	{{ if .Optional -}}
	if {{ .Keys | CheckOptional "o" | Join " && " }} {
		idx = CompoundIndex({{ .Keys | Materialize "o" | Join ", " }})
		c.Client.SRem(context.TODO(), c.Key({{$cacheKey}}{{.Name}}, idx), o.{{$ID}})
		err := c.Client.Incr(context.TODO(), c.ETagKey({{$cacheKey}}{{.Name}}, idx)).Err()
		if err != nil {
			return common.NewErrorE(http.StatusInternalServerError, err)
		}
	}
	{{- else -}}
	idx = CompoundIndex({{ .Keys | Materialize "o" | Join ", " }})
	c.Client.SRem(context.TODO(), c.Key({{$cacheKey}}{{.Name}}, idx), o.{{$ID}})
	err = c.Client.Incr(context.TODO(), c.ETagKey({{$cacheKey}}{{.Name}}, idx)).Err()
	if err != nil {
		return common.NewErrorE(http.StatusInternalServerError, err)
	}
	{{end -}}
	{{end -}}
	{{end}}

	return nil
}
