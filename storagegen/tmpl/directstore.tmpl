package storage

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/lingio/{{.ServiceName}}/models"

	"github.com/lingio/go-common"
	"github.com/minio/minio-go/v7"
	uuid "github.com/satori/go.uuid"

	zl "github.com/rs/zerolog/log"
)

{{$modelName := .DbTypeName -}}
{{$ID := .IdName -}}
{{$storeName := printf "%sStore" .TypeName -}}

var {{$storeName}}Config common.ObjectStoreConfig
func init() {
	err := json.Unmarshal([]byte(`
{{.Config | PrettyPrint}}
	`), &{{$storeName}}Config)
	if err != nil {
		panic(fmt.Errorf("error parsing store config: %w", err))
	}
}

type {{$storeName}} struct {
	backend common.LingioStore
}

// New{{$storeName}} configures a new store and initializes the provided cache if required.
func New{{$storeName}}(mc *minio.Client, serviceKey string) (*{{$storeName}}, error) {
	// DefaultOjbectStoreConfig || deserialize
	objectStore, err := common.NewObjectStore(mc, "{{.BucketName}}", {{$storeName}}Config)
	if err != nil {
		return nil, fmt.Errorf("creating object store: %w", err)
	}

	encryptedStore, err := common.NewEncryptedStore(objectStore, serviceKey)
	if err != nil {
		return nil, fmt.Errorf("creating encrypted store: %w", err)
	}

	db := &{{$storeName}}{
		backend: encryptedStore,
	}

	return db, nil
}

// filename map typed values to a string
func (s *{{$storeName}}) filename(id string) string {
	{{ if .FilenameFormat -}}
	return fmt.Sprintf("{{.FilenameFormat}}", id)
	{{- else -}}
	return id + ".json"
	{{- end }}
}

//=============================================================================
// Lingio store implementation
//=============================================================================

// Create attempts to store the provided object in store.
func (s *{{$storeName}}) Create(ctx context.Context, obj models.{{.DbTypeName}}) (*models.{{.DbTypeName}}, *common.Error) {
	if obj.{{.IdName}} != "" {
		// check that the object doesn't exist
		o, _, err := s.Get(obj.{{.IdName}})
		if err != nil && err.HttpStatusCode != http.StatusNotFound {
			return nil, common.NewErrorE(http.StatusInternalServerError, err).
				Str("ID", obj.{{.IdName}}).Msg("failed query for object")
		}
		if o != nil { // object exists!
			return nil, common.NewError(http.StatusBadRequest).
				Str("ID", obj.{{.IdName}}).Msg("an object with this ID is already stored in the database")
		}
	} else {
		obj.{{.IdName}} = uuid.NewV4().String()
	}
	if err := s.put(ctx, obj); err != nil {
		return nil, err
	}
	return &obj, nil
}


// Get attempts to load an object with the specified ID from the store.
func (s *{{$storeName}}) Get(id string) (*models.{{.DbTypeName}}, string, *common.Error) {
	data, info, lerr := s.backend.GetObject(s.filename(id))
	if lerr != nil {
		return nil, "", lerr
	}
	obj := &models.{{.DbTypeName}}{}
	if err := json.Unmarshal(data, &obj); err != nil {
		return nil, "", common.NewErrorE(http.StatusInternalServerError, err).
			Str("ID", id).Msg("failed to unmarshal json")
	}
	return obj, info.ETag, nil
}

// Put updates or creates the object in both cache and backing store.
func (s *{{$storeName}}) Put(ctx context.Context, obj models.{{.DbTypeName}}) *common.Error {
	return s.put(ctx, obj)
}

// put does the heavy lifting for both Put and Create methods.
func (s *{{$storeName}}) put(ctx context.Context, obj models.{{.DbTypeName}}) *common.Error {
	data, err := json.Marshal(obj)
	if err != nil {
		return common.NewErrorE(http.StatusInternalServerError, err).
			Str("ID", obj.{{.IdName}}).Msg("failed to marshal json")
	}
	_, lerr := s.backend.PutObject(ctx, s.filename(obj.{{.IdName}}), data)
	if lerr != nil {
		return lerr.Str("ID", obj.{{.IdName}}).Msg("failed to write to minio")
	}
	return nil
}

// Delete
func (s *{{$storeName}}) Delete(ctx context.Context, id string) *common.Error {
	if err := s.backend.DeleteObject(ctx, s.filename(id)); err != nil {
		return err.Str("ID", id).Msg("failed to delete object in minio")
	}
	return nil
}

//=============================================================================
// Extra functions from secondary indexes, passes to cache layer
//=============================================================================
{{range .SecondaryIndexes -}}
{{if eq .Type "unique"}}
// GetBy{{.Name}} fetches a single {{$modelName}} by its {{.Key}}
func (s *{{$storeName}}) GetBy{{.Name}}(key string) (*models.{{$modelName}}, string, *common.Error) {
	panic("not yet implemented")
}
{{else if eq .Type "set"}}
// GetAllBy{{.Name}} fetches all {{$modelName}}s by their {{.Key}}
func (s *{{$storeName}}) GetAllBy{{.Name}}(key string) ([]models.{{$modelName}}, string, *common.Error) {
	panic("not yet implemented")
}
{{end -}}
{{end}}
