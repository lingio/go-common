package storage

import (
	"context"
	"fmt"
	"net/http"

    "github.com/lingio/go-common"
    "github.com/minio/minio-go/v7"
	"github.com/minio/minio-go/v7/pkg/tags"
)

func minioErrToCommonErr(err error) *common.Error {
	minioErr := err.(minio.ErrorResponse)
	return common.NewErrorE(minioErr.StatusCode, err).
		Str("minio.Message", minioErr.Message).
		Str("minio.Code", minioErr.Code).
		Str("minio.BucketName", minioErr.BucketName).
		Str("minio.Key", minioErr.Key)
}

func writePartnerBucketETag(c *minio.Client, bucketName string, partnerID string, etag string) *common.Error {
	// Write ETag
	bucketTags, err := tags.MapToBucketTags(map[string]string{fmt.Sprintf("%s-etag", partnerID): etag})
	if err != nil {
		return common.NewErrorE(http.StatusInternalServerError, err).Str("bucketName", bucketName).Msg("failed to create bucket etag")
	}
	err = c.SetBucketTagging(context.Background(), bucketName, bucketTags)
	if err != nil {
		return common.NewErrorE(http.StatusInternalServerError, err).Str("bucketName", bucketName).Msg("failed to store bucket etag")
	}
	return nil
}

func getPartnerBucketETag(c *minio.Client, bucketName string, partnerID string) (string, *common.Error) {
	bucketTags, err := c.GetBucketTagging(context.Background(), bucketName)
	if err != nil {
		return "", common.NewErrorE(http.StatusInternalServerError, err).Str("bucketName", bucketName).Msg("failed to get bucket tags")
	}
	tagsMap := bucketTags.ToMap()
	return tagsMap[fmt.Sprintf("%s-etag", partnerID)], nil
}
