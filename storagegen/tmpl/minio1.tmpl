package storage

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/lingio/{{.ServiceName}}/models"

	"github.com/lingio/go-common"
	"github.com/minio/minio-go/v7"
	"github.com/minio/minio-go/v7/pkg/credentials"
	uuid "github.com/satori/go.uuid"
)

type {{.TypeName}}MinioDb struct {
	c          *minio.Client
	bucketName string
}

func New{{.TypeName}}MinioDb(endpoint string, accessKeyID string, accessKeySecret string, token string, useHTTPS bool, useVersioning bool) (*{{.TypeName}}MinioDb, *common.Error) {
	minioClient, err := minio.New(endpoint, &minio.Options{
		Creds:  credentials.NewStaticV4(accessKeyID, accessKeySecret, token),
		Secure: useHTTPS,
	})
	if err != nil {
		return nil, common.NewErrorE(http.StatusInternalServerError, err).Str("error", err.Error()).Msg("failed to init min.io")
	}
	s3db := &{{.TypeName}}MinioDb{
		c:          minioClient,
		bucketName: "{{.BucketName}}",
	}
	err = s3db.initBucket(minioClient, useVersioning)
	if err != nil {
		return nil, common.NewErrorE(http.StatusInternalServerError, err).Msg("failed to init bucket")
	}
	return s3db, nil
}

func (db *{{.TypeName}}MinioDb) Get(partnerID string, id string) (*models.{{.DbTypeName}}, string, *common.Error) {
	return db.getObject(db.filename(partnerID, id))
}

func (db *{{.TypeName}}MinioDb) Create(partnerID string, obj models.{{.DbTypeName}}) (*models.{{.DbTypeName}}, *common.Error) {
	if obj.{{.IdName}} != "" {
		// check that the object doesn't exist
		o, _, err := db.Get(partnerID, obj.{{.IdName}})
		if err != nil && err.HttpStatusCode != http.StatusNotFound {
			return nil, common.NewErrorE(http.StatusInternalServerError, err).
				Str("partnerID", partnerID).Str("ID", obj.{{.IdName}}).Msg("failed query for object")
		}
		if o != nil { // object exists!
			return nil, common.NewError(http.StatusBadRequest).
				Str("partnerID", partnerID).Str("ID", obj.{{.IdName}}).Msg("an object with this ID is already stored in the database")
		}
	} else {
		obj.{{.IdName}} = uuid.NewV4().String()
	}
	err := db.Put(partnerID, obj)
	if err != nil {
		return nil, err
	}
	return &obj, nil
}

func (db *{{.TypeName}}MinioDb) Put(partnerID string, obj models.{{.DbTypeName}}) *common.Error {
	b, err := json.Marshal(obj)
	if err != nil {
		return common.NewErrorE(http.StatusInternalServerError, err).
			Str("partnerID", partnerID).Str("ID", obj.{{.IdName}}).Msg("failed to marshal json")
	}
	info, err := db.c.PutObject(context.Background(), db.bucketName, db.filename(partnerID, obj.{{.IdName}}), bytes.NewBuffer(b), int64(len(b)), minio.PutObjectOptions{
		UserMetadata:            nil,
		UserTags:                nil,
		ContentType:             "application/json",
		ContentEncoding:         "",
		ContentDisposition:      "",
		CacheControl:            "",
		Mode:                    "",
		RetainUntilDate:         time.Time{},
		ServerSideEncryption:    nil,
		NumThreads:              0,
		StorageClass:            "",
		WebsiteRedirectLocation: "",
		PartSize:                0,
		LegalHold:               "",
		SendContentMd5:          false,
		DisableMultipart:        false,
	})
	if err != nil {
		return common.NewErrorE(http.StatusInternalServerError, err).
			Str("partnerID", partnerID).Str("ID", obj.{{.IdName}}).Msg("failed to write to minio")
	}

    return writePartnerBucketETag(db.c, db.bucketName, partnerID, info.ETag)
}

func (db *{{.TypeName}}MinioDb) Delete(partnerID string, id string) *common.Error {
	err := db.c.RemoveObject(context.Background(), db.bucketName, db.filename(partnerID, id), minio.RemoveObjectOptions{
		GovernanceBypass: false,
		VersionID:        "",
	})
	if err != nil {
		return common.NewErrorE(http.StatusInternalServerError, err).
			Str("partnerID", partnerID).Str("ID", id).Msg("failed to delete object in minio")
	}
	etag, err := getPartnerBucketETag(db.c, db.bucketName, partnerID)
	if err != nil {
		return common.NewErrorE(http.StatusInternalServerError, err).
			Str("partnerID", partnerID).Str("ID", id).Msg("failed to delete object in minio because of etag issue")
	}
	etag = etag + "x"
    return writePartnerBucketETag(db.c, db.bucketName, partnerID, etag)
}

func (db *{{.TypeName}}MinioDb) GetAllForPartner(partnerID string) ([]models.{{.DbTypeName}}, string, *common.Error) {
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	objectCh := db.c.ListObjects(ctx, db.bucketName, minio.ListObjectsOptions{
		Prefix:    partnerID,
		Recursive: true,
	})
	objs := make([]models.{{.DbTypeName}}, 0)
	for objInfo := range objectCh {
		if objInfo.Err != nil {
			return nil, "", common.NewErrorE(http.StatusInternalServerError, objInfo.Err).
				Str("partnerID", partnerID).Msg("failed to list objects in minio")
		}
		m, _, lerr := db.getObject(objInfo.Key)
		if lerr != nil {
			return nil, "", lerr
		}
		objs = append(objs, *m)
	}
	etag, err := getPartnerBucketETag(db.c, db.bucketName, partnerID)
	if err != nil {
		return nil, "", err
	}
	return objs, etag, nil
}

func (db *{{.TypeName}}MinioDb) initBucket(mc *minio.Client, useVersioning bool) error {
	exists, err := mc.BucketExists(context.Background(), db.bucketName)
	if err != nil {
		return err
	}
	if !exists {
		err = mc.MakeBucket(context.Background(), db.bucketName, minio.MakeBucketOptions{
			ObjectLocking: false,
		})
		if err != nil {
			return err
		}
		if useVersioning {
			err = mc.EnableVersioning(context.Background(), db.bucketName)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (db *{{.TypeName}}MinioDb) filename(partnerID string, id string) string {
	return fmt.Sprintf("%s-%s.json", partnerID, id)
}

func (db *{{.TypeName}}MinioDb) toModel(o *minio.Object) (*models.{{.DbTypeName}}, *common.Error) {
	b, err := ioutil.ReadAll(o)
	if err != nil {
		return nil, minioErrToCommonErr(err)
	}
	var target models.{{.DbTypeName}}
	err = json.Unmarshal(b, &target)
	if err != nil {
		return nil, common.NewErrorE(http.StatusInternalServerError, err).Msg("failed to unmarshal object")
	}
	return &target, nil
}

func (db *{{.TypeName}}MinioDb) getObject(filename string) (*models.{{.DbTypeName}}, string, *common.Error) {
	o, err := db.c.GetObject(context.Background(), db.bucketName, filename, minio.GetObjectOptions{
		ServerSideEncryption: nil,
	})
    if err != nil {
        return nil, "", minioErrToCommonErr(err).Msg("failed to get object from min.io")
    }

    stat, err := o.Stat()
    if err != nil {
        return nil, "", minioErrToCommonErr(err).Msg("failed to get object info from min.io")
    }

    m, lerr := db.toModel(o)
    if lerr != nil {
        return nil, "", lerr
    }
    return m, stat.ETag, nil
}
